# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12EK2KwWBLh4RmonXhSaPIlOY1TIIvbgH
"""

import pandas as pd
import numpy as np

# 1) Cargar datos
df = pd.read_csv("train.csv")

# 2) Variable objetivo y features
y = df["Survived"]
X = df.drop(columns=["Survived", "PassengerId", "Name", "Ticket", "Cabin"])  # quitamos columnas poco útiles

# 3) Train/Test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.30, random_state=42, stratify=y
)

# 4) Preprocesamiento: imputación + OneHot (categóricas)
from sklearn.compose import ColumnTransformer, make_column_selector as selector
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder

numeric_features = selector(dtype_include=np.number)(X_train)
categorical_features = selector(dtype_exclude=np.number)(X_train)

numeric_transformer = SimpleImputer(strategy="median")
categorical_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("onehot", OneHotEncoder(handle_unknown="ignore"))
])

preprocessor = ColumnTransformer(
    transformers=[
        ("num", numeric_transformer, numeric_features),
        ("cat", categorical_transformer, categorical_features),
    ],
    remainder="drop"
)

# 5) Modelos (distintos a KNN): Regresión Logística y Árbol de Decisión
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

log_clf = Pipeline(steps=[
    ("prep", preprocessor),
    ("clf", LogisticRegression(max_iter=1000))
])

tree_clf = Pipeline(steps=[
    ("prep", preprocessor),
    ("clf", DecisionTreeClassifier(random_state=42))
])

# 6) Entrenar
log_clf.fit(X_train, y_train)
tree_clf.fit(X_train, y_train)

# 7) Evaluar: matriz de confusión y métricas
from sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix, classification_report

def evaluar(modelo, nombre):
    y_pred = modelo.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    p, r, f1, _ = precision_recall_fscore_support(y_test, y_pred, average="binary", zero_division=0)
    print(f"\n=== {nombre} ===")
    print("Matriz de confusión:\n", confusion_matrix(y_test, y_pred))
    print("\nReporte de clasificación:\n", classification_report(y_test, y_pred, zero_division=0))
    return {"Modelo": nombre, "Accuracy": acc, "Precision": p, "Recall": r, "F1": f1}

res1 = evaluar(log_clf, "Regresión Logística")
res2 = evaluar(tree_clf, "Árbol de Decisión")

# 8) Tabla comparativa
comp = pd.DataFrame([res1, res2]).round(3)
print("\nComparativa:\n", comp)